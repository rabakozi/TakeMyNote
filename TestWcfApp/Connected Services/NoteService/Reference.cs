//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestWcfApp.NoteService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NoteDigest", Namespace="http://schemas.datacontract.org/2004/07/TakeMyNote.Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TestWcfApp.NoteService.Note))]
    public partial class NoteDigest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModifiedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShareLinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SummaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Modified {
            get {
                return this.ModifiedField;
            }
            set {
                if ((this.ModifiedField.Equals(value) != true)) {
                    this.ModifiedField = value;
                    this.RaisePropertyChanged("Modified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShareLink {
            get {
                return this.ShareLinkField;
            }
            set {
                if ((object.ReferenceEquals(this.ShareLinkField, value) != true)) {
                    this.ShareLinkField = value;
                    this.RaisePropertyChanged("ShareLink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((object.ReferenceEquals(this.SummaryField, value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Note", Namespace="http://schemas.datacontract.org/2004/07/TakeMyNote.Model")]
    [System.SerializableAttribute()]
    public partial class Note : TestWcfApp.NoteService.NoteDigest {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NoteService.INoteService")]
    public interface INoteService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteService/GetById", ReplyAction="http://tempuri.org/INoteService/GetByIdResponse")]
        TestWcfApp.NoteService.Note GetById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteService/GetById", ReplyAction="http://tempuri.org/INoteService/GetByIdResponse")]
        System.Threading.Tasks.Task<TestWcfApp.NoteService.Note> GetByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteService/GetByLink", ReplyAction="http://tempuri.org/INoteService/GetByLinkResponse")]
        TestWcfApp.NoteService.Note GetByLink(string sharedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteService/GetByLink", ReplyAction="http://tempuri.org/INoteService/GetByLinkResponse")]
        System.Threading.Tasks.Task<TestWcfApp.NoteService.Note> GetByLinkAsync(string sharedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteService/GetAllByUserId", ReplyAction="http://tempuri.org/INoteService/GetAllByUserIdResponse")]
        TestWcfApp.NoteService.NoteDigest[] GetAllByUserId(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteService/GetAllByUserId", ReplyAction="http://tempuri.org/INoteService/GetAllByUserIdResponse")]
        System.Threading.Tasks.Task<TestWcfApp.NoteService.NoteDigest[]> GetAllByUserIdAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteService/Create", ReplyAction="http://tempuri.org/INoteService/CreateResponse")]
        void Create(TestWcfApp.NoteService.Note note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteService/Create", ReplyAction="http://tempuri.org/INoteService/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(TestWcfApp.NoteService.Note note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteService/Update", ReplyAction="http://tempuri.org/INoteService/UpdateResponse")]
        void Update(TestWcfApp.NoteService.Note note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteService/Update", ReplyAction="http://tempuri.org/INoteService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(TestWcfApp.NoteService.Note note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteService/Delete", ReplyAction="http://tempuri.org/INoteService/DeleteResponse")]
        void Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteService/Delete", ReplyAction="http://tempuri.org/INoteService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INoteServiceChannel : TestWcfApp.NoteService.INoteService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NoteServiceClient : System.ServiceModel.ClientBase<TestWcfApp.NoteService.INoteService>, TestWcfApp.NoteService.INoteService {
        
        public NoteServiceClient() {
        }
        
        public NoteServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NoteServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NoteServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NoteServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TestWcfApp.NoteService.Note GetById(int id) {
            return base.Channel.GetById(id);
        }
        
        public System.Threading.Tasks.Task<TestWcfApp.NoteService.Note> GetByIdAsync(int id) {
            return base.Channel.GetByIdAsync(id);
        }
        
        public TestWcfApp.NoteService.Note GetByLink(string sharedId) {
            return base.Channel.GetByLink(sharedId);
        }
        
        public System.Threading.Tasks.Task<TestWcfApp.NoteService.Note> GetByLinkAsync(string sharedId) {
            return base.Channel.GetByLinkAsync(sharedId);
        }
        
        public TestWcfApp.NoteService.NoteDigest[] GetAllByUserId(int userId) {
            return base.Channel.GetAllByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<TestWcfApp.NoteService.NoteDigest[]> GetAllByUserIdAsync(int userId) {
            return base.Channel.GetAllByUserIdAsync(userId);
        }
        
        public void Create(TestWcfApp.NoteService.Note note) {
            base.Channel.Create(note);
        }
        
        public System.Threading.Tasks.Task CreateAsync(TestWcfApp.NoteService.Note note) {
            return base.Channel.CreateAsync(note);
        }
        
        public void Update(TestWcfApp.NoteService.Note note) {
            base.Channel.Update(note);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(TestWcfApp.NoteService.Note note) {
            return base.Channel.UpdateAsync(note);
        }
        
        public void Delete(int id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
    }
}
